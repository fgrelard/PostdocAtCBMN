#+TITLE: Postdoc at CBMN

#+attr_html: :width 500px :align left
[[file:fig/rate.png]]

* Meetings
** Conferences
** Group meetings
*** [[file:meetings/meeting2021_11_19.org][Meeting November]] <2021-11-19 Fri>
*** Meeting December
** Scientific days
*** Scientific *day* Multiscale Biophysics Dept. (MSB-CBMN) <2021-11-05 Fri>
Presentations of Michael and Florent.
Introduction to the department.
Poster presentations.

**  Trainings
* Research
** Data structures
*** Sparse matrices
Large centroided MS images cannot fit in memory. The majority of the values in the MS images are zeroes. One approach is to use /sparse matrices/, where only nonzero datapoints are stored.

_Approach:_
**** DONE Sparse matrices with same operations as numpy's ndarray
CLOSED: <2021-10-01 Fri 12:05>

#+begin_src python
  import sparse

  #redefine numpy's ndarray operations
  def __gt__(...):
      pass

  def transpose(...):
      pass

  def __getitem__(...):
      pass
#+end_src
**** DONE Class enclosing the MS Image
CLOSED: <2021-10-08 Fri 12:19>

Operations on both the spectra and the image
#+begin_src python
  class MSImageImplementation:
      def __init__(self, image, spectra):
          self.image = image
          self.spectra = spectra

      #redefine various operations working on both spectra and images
#+end_src
**** DONE Transparent integration
CLOSED: <2021-10-29 Fri 12:05>

Choose the appropriate type for the MS image depending on whether the data is centroided or profile.
#+begin_src python
  class MSImage:
      "
        Allows to create an MS image type
        with the appropriate np.ndarray or
        sparse matrix type
        "

        def __init__(self, image, ...):
            # determines the appropriate type
            image = which_type(image)
            return MSImageImplementation(image, ...)
#+end_src

*** Efficient input/output
Centroided images with high spatial resolution still do not fit in memory.
We need to read the images *on the fly*, in a time-efficient manner.

_Approach:_
**** TODO Integration in  ~MSImageImplementation~
**** TODO Display on the fly.
** Graphical User Interface
*** Displaying images
We need an efficient viewer allowing to display image stacks.
We use the ~pyqtgraph~ library.

_TODOs:_
**** DONE Display and navigate through ion images
CLOSED: [2021-09-22 Wed 16:14]
**** DONE Display the mean spectrum associated to the MS image
CLOSED: [2021-10-14 Thu 16:27]
**** DONE Interact with the mean spectrum to select ion images
CLOSED: [2021-10-19 Tue 16:15]
**** DONE Interaction with ~TextEdit~ to select the appropriate m/z value with tolerance
CLOSED: [2021-10-19 Tue 16:22]
**** DONE Hover on image to display pixel information
CLOSED: [2021-10-24 Sun 16:24]
*** Region-of-Interest management
Regions of interest (ROI) are interesting to analyze an area of pixels. We use them in several use-cases.

 _Use-cases:_
**** DONE Compute the average spectrum of the pixels inside the ROI
CLOSED: [2021-10-25 Mon 16:29]
**** DONE Compute the average pixel intensity inside the ROI
CLOSED: [2021-10-26 Tue 16:30]
**** DONE Control intensity thresholds
CLOSED: [2021-10-31 Sun 16:29]

*** Functionality frames

** Registration
*** Fiducial landmarks
*** Partial registration
** Correlation
Joint statistical analysis
** Miscellaneous
*** Crop MS images
Some data might be missing from MS images, /i.e./ abnormal artefacts where no data is recorded. The image should be cropped to retain only the *valuable information*.

_Approach:_
1) Specify a list of values where data is missing
2) Compute the complementary coordinates where data is present
3) Export the image with the information from those coordinates

_Bug fixes:_
**** TODO Removing lines induces undesirable offset of data
:LOGBOOK:
CLOCK: [2021-11-05 Fri 15:24]--[2021-11-05 Fri 17:15] =>  1:51
CLOCK: [2021-11-04 Thu 15:27]--[2021-11-04 Thu 17:51] =>  2:24
:END:
1) Generating a simpler image with reduced spectral dimension
2) Try on reduced image
   
* Teaching
